name: Test & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

      - name: Run unit and widget tests
        run: flutter test --coverage --exclude-tags=golden

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: |
          if [ -f coverage/lcov.info ]; then
            # Try to extract coverage using lcov if available
            if command -v lcov &> /dev/null; then
              coverage=$(lcov --summary coverage/lcov.info 2>&1 | grep -oP 'lines\.*: \K[0-9.]*' || echo "0")
            else
              # Fallback: parse lcov.info directly
              LF=$(grep "^LF:" coverage/lcov.info | tail -1 | awk '{print $2}' || echo "0")
              LH=$(grep "^LH:" coverage/lcov.info | tail -1 | awk '{print $2}' || echo "0")
              if [ "$LF" != "0" ] && [ -n "$LF" ]; then
                coverage=$(echo "scale=2; $LH * 100 / $LF" | bc || echo "0")
              else
                coverage="0"
              fi
            fi
            echo "Current coverage: ${coverage}%"
            echo "Target threshold: 70%"
            # Check if bc is available for comparison
            if command -v bc &> /dev/null; then
              if (( $(echo "$coverage < 70" | bc -l) )); then
                echo "⚠️ Coverage is below 70% threshold (current: ${coverage}%)"
                echo "This is a warning - build will continue. Please continue improving coverage."
                # Don't fail the build - coverage improvement is in progress
              else
                echo "✅ Coverage meets threshold!"
              fi
            else
              # Simple string comparison if bc not available
              COVERAGE_INT=$(echo "$coverage" | cut -d. -f1)
              if [ "$COVERAGE_INT" -lt 70 ] 2>/dev/null; then
                echo "⚠️ Coverage is below 70% threshold (current: ${coverage}%)"
                echo "This is a warning - build will continue. Please continue improving coverage."
              else
                echo "✅ Coverage meets threshold!"
              fi
            fi
          else
            echo "⚠️ Coverage file not found. Skipping threshold check."
          fi

  golden-check:
    name: Verify Golden Tests
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run golden tests (strict mode)
        run: flutter test test/golden/
        continue-on-error: false

  integration-test:
    name: Integration Tests (E2E)
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Setup iOS Simulator
        run: |
          # List available simulators
          echo "Available iOS simulators:"
          xcrun simctl list devices available | grep -i "iphone" || echo "No iPhone simulators found"

          # Get the first available iPhone simulator UUID
          SIMULATOR_UUID=$(xcrun simctl list devices available | grep -i "iphone" | grep -i "available" | head -1 | grep -oE '[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}' || echo "")

          if [ -z "$SIMULATOR_UUID" ]; then
            # Try to get any iPhone device (including already booted ones)
            SIMULATOR_UUID=$(xcrun simctl list devices | grep -i "iphone" | grep -v "unavailable" | head -1 | grep -oE '[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}' || echo "")
          fi

          if [ -z "$SIMULATOR_UUID" ]; then
            echo "❌ No iOS simulator found!"
            echo "Listing all devices:"
            xcrun simctl list devices
            exit 1
          fi

          echo "Found iOS simulator: $SIMULATOR_UUID"
          echo "SIMULATOR_UUID=$SIMULATOR_UUID" >> $GITHUB_ENV

          # Boot the simulator
          echo "Booting iOS simulator..."
          xcrun simctl boot "$SIMULATOR_UUID" 2>&1 || echo "Simulator may already be booted"

          # Open Simulator.app so Flutter can detect it
          echo "Opening Simulator.app..."
          open -a Simulator || echo "Could not open Simulator.app"

          # Wait for simulator to be ready
          echo "Waiting for simulator to be ready..."
          sleep 15

          # Verify simulator is booted
          if xcrun simctl list devices | grep "$SIMULATOR_UUID" | grep -q "Booted"; then
            echo "✅ Simulator is booted and ready"
          else
            echo "⚠️ Simulator boot status unclear, but continuing..."
          fi

      - name: Run integration tests
        run: |
          echo "Waiting for Flutter to detect iOS simulator..."
          sleep 5

          # List all Flutter devices
          echo "Available Flutter devices:"
          flutter devices

          # Extract iOS simulator device ID from Flutter output
          # Flutter format: "Device Name • device_id • platform info"
          # We need the device_id (second field after first •)

          # Method 1: Extract device ID from grep output (format: "Device • device_id • ...")
          DEVICE_ID=$(flutter devices | grep -i "ios" | grep -i "simulator" | head -1 | sed 's/.*• \([^ ]*\).*/\1/' | awk '{print $1}' || echo "")

          # Method 2: If that doesn't work, try getting the second word after "•"
          if [ -z "$DEVICE_ID" ]; then
            DEVICE_ID=$(flutter devices | grep -i "ios" | grep -i "simulator" | head -1 | awk -F'•' '{print $2}' | awk '{print $1}' | tr -d ' ' || echo "")
          fi

          # Method 3: Use simulator UUID directly
          if [ -z "$DEVICE_ID" ] && [ -n "$SIMULATOR_UUID" ]; then
            # Check if Flutter recognizes the UUID
            if flutter devices | grep -q "$SIMULATOR_UUID"; then
              DEVICE_ID="$SIMULATOR_UUID"
            fi
          fi

          # Method 4: Try parsing by column position
          if [ -z "$DEVICE_ID" ]; then
            DEVICE_ID=$(flutter devices | grep -i "ios" | grep -i "simulator" | head -1 | awk '{for(i=1;i<=NF;i++) {if($i=="•" && i+1<=NF) {print $(i+1); exit}}}' || echo "")
          fi

          # Debug: Show what we found
          echo ""
          echo "Device detection results:"
          echo "  SIMULATOR_UUID: $SIMULATOR_UUID"
          echo "  DEVICE_ID: $DEVICE_ID"
          echo ""

          if [ -n "$DEVICE_ID" ]; then
            echo "✅ Found iOS simulator device ID: $DEVICE_ID"
            echo "Running integration tests on iOS simulator..."
            flutter test integration_test/ -d "$DEVICE_ID"
          else
            echo "⚠️ Could not automatically detect iOS simulator device ID"
            echo ""
            echo "Attempting fallback: Using 'ios' device selector..."
            # Fallback: Let Flutter auto-select iOS device when only one is available
            flutter test integration_test/ -d ios || {
              echo "❌ Integration tests failed!"
              echo ""
              echo "Debug information:"
              echo "Available Flutter devices:"
              flutter devices
              echo ""
              echo "Available simulators:"
              xcrun simctl list devices | grep -i "iphone" | head -5
              exit 1
            }
          fi

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test_driver/

  ios-build:
    name: iOS Build Check
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

      - name: Run unit/widget tests
        run: flutter test --no-pub

      - name: Install iOS pods
        working-directory: ios
        run: pod install --repo-update

      - name: Build iOS (no codesign)
        run: flutter build ios --no-codesign


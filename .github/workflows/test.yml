name: Test & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

      - name: Run unit and widget tests
        run: flutter test --coverage --exclude-tags=golden

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: |
          if [ -f coverage/lcov.info ]; then
            # Try to extract coverage using lcov if available
            if command -v lcov &> /dev/null; then
              coverage=$(lcov --summary coverage/lcov.info 2>&1 | grep -oP 'lines\.*: \K[0-9.]*' || echo "0")
            else
              # Fallback: parse lcov.info directly
              LF=$(grep "^LF:" coverage/lcov.info | tail -1 | awk '{print $2}' || echo "0")
              LH=$(grep "^LH:" coverage/lcov.info | tail -1 | awk '{print $2}' || echo "0")
              if [ "$LF" != "0" ] && [ -n "$LF" ]; then
                coverage=$(echo "scale=2; $LH * 100 / $LF" | bc || echo "0")
              else
                coverage="0"
              fi
            fi
            echo "Current coverage: ${coverage}%"
            echo "Target threshold: 70%"
            # Check if bc is available for comparison
            if command -v bc &> /dev/null; then
              if (( $(echo "$coverage < 70" | bc -l) )); then
                echo "⚠️ Coverage is below 70% threshold (current: ${coverage}%)"
                echo "This is a warning - build will continue. Please continue improving coverage."
                # Don't fail the build - coverage improvement is in progress
              else
                echo "✅ Coverage meets threshold!"
              fi
            else
              # Simple string comparison if bc not available
              COVERAGE_INT=$(echo "$coverage" | cut -d. -f1)
              if [ "$COVERAGE_INT" -lt 70 ] 2>/dev/null; then
                echo "⚠️ Coverage is below 70% threshold (current: ${coverage}%)"
                echo "This is a warning - build will continue. Please continue improving coverage."
              else
                echo "✅ Coverage meets threshold!"
              fi
            fi
          else
            echo "⚠️ Coverage file not found. Skipping threshold check."
          fi

  golden-check:
    name: Verify Golden Tests
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run golden tests (strict mode)
        run: flutter test test/golden/
        continue-on-error: false

  integration-test:
    name: Integration Tests (E2E)
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Boot iOS Simulator
        run: |
          # List available simulators
          xcrun simctl list devices available
          # Boot iPhone 15 (commonly available on GitHub Actions)
          xcrun simctl boot "iPhone 15" 2>/dev/null || xcrun simctl boot "iPhone 14" 2>/dev/null || xcrun simctl boot "iPhone 13" 2>/dev/null || echo "Simulator may already be booted"
          # Wait a moment for simulator to be ready
          sleep 5

      - name: Run integration tests
        run: |
          # List available Flutter devices
          flutter devices
          # Find first iOS simulator device ID
          DEVICE_ID=$(flutter devices | grep -i "ios" | grep -i "simulator" | head -1 | awk '{print $NF}' | tr -d '()')
          if [ -n "$DEVICE_ID" ]; then
            echo "Running tests on iOS simulator: $DEVICE_ID"
            flutter test integration_test/ -d "$DEVICE_ID"
          else
            echo "No iOS simulator found, running with auto-detection"
            flutter test integration_test/
          fi

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test_driver/

  ios-build:
    name: iOS Build Check
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

      - name: Run unit/widget tests
        run: flutter test --no-pub

      - name: Install iOS pods
        working-directory: ios
        run: pod install --repo-update

      - name: Build iOS (no codesign)
        run: flutter build ios --no-codesign

